recv_packet
1

split_packet = self.split_packet(packet, " ")

# Comprueba el formato del paquete y extrae el ID/nombre del invitado
if len(split_packet) >= 2 and split_packet[0] == "dlgi2" and split_packet[1].startswith("#pjoin"):
    payload_parts = split_packet[1].split("^")
    invitacion_id_str = payload_parts[2] if len(payload_parts) >= 3 else ""
    invitacion_nombre = payload_parts[3] if len(payload_parts) >= 4 else None

    try:
        invitacion_id = int(invitacion_id_str)
    except (TypeError, ValueError):
        invitacion_id = None

    allowed_ids = set()
    for candidate_id in getattr(self, "partyID", []):
        try:
            allowed_ids.add(int(candidate_id))
        except (TypeError, ValueError):
            continue

    # Construye la lista de nombres autorizados igual que el filtro de comercio
    known_names = set()

    authorized_members = getattr(self, "authorized_members", {})
    if isinstance(authorized_members, dict):
        known_names.update(
            info.get("name")
            for info in authorized_members.values()
            if isinstance(info, dict) and info.get("name")
        )

    authorized_names = getattr(self, "authorized_names", set())
    if isinstance(authorized_names, (set, list, tuple)):
        known_names.update(
            name for name in authorized_names if isinstance(name, str)
        )

    attr51_value = getattr(self, "attr51", [])
    if isinstance(attr51_value, list):
        known_names.update(name for name in attr51_value if isinstance(name, str))

    members_received_items = getattr(self, "members_received_items", set())
    if isinstance(members_received_items, (set, list, tuple)):
        known_names.update(
            name for name in members_received_items if isinstance(name, str)
        )

    current_trader = getattr(self, "current_trader", None)
    if isinstance(current_trader, str):
        known_names.add(current_trader)

    invitacion_valida_por_id = (
        invitacion_id is not None and invitacion_id in allowed_ids
    )
    invitacion_valida_por_nombre = (
        isinstance(invitacion_nombre, str) and invitacion_nombre in known_names
    )

    if invitacion_valida_por_id or invitacion_valida_por_nombre:
        time.sleep(self.randomize_delay(1,2))
        print(f"[LEADER] {self.name} accept party")
        self.api.send_packet(f"#pjoin^3^{invitacion_id_str}")   # aceptaci√≥n
    else:
        time.sleep(self.randomize_delay(1,2))
        print(f"[LEADER] {self.name} reject party")
        self.api.send_packet(f"#pjoin^4^{invitacion_id_str}")   # rechazo


