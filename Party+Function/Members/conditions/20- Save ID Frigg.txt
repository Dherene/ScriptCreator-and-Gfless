periodical
0
import re
import time
TARGET_VNUM = 2602
TARGET_NAME = "Frigg"
TRIGGER_ATTR1_STATE = 10
NEXT_ATTR1_STATE = 11
QUERY_COOLDOWN_SECONDS = 10
def _build_ident(raw):
    if not isinstance(raw, str):
        raw = ""
    parts = re.findall(r"[A-Za-z0-9]+", raw)
    if not parts:
        return f"Vnum{TARGET_VNUM}"
    ident = "".join(part.capitalize() for part in parts)
    return ident if not ident[0].isdigit() else f"Npc{ident}"
def _lower_first(text):
    return text[:1].lower() + text[1:] if text else text
IDENT = _build_ident(TARGET_NAME)
BASE = _lower_first(IDENT)
STORAGE_ATTR = IDENT
LAST_QUERY_ATTR = f"_{BASE}_last_query"
RESET_FUNC = f"_{BASE}_tp_reset_query_state"
COMPLETE_FUNC = f"_{BASE}_tp_complete"
def _reset():
    if hasattr(self, LAST_QUERY_ATTR):
        delattr(self, LAST_QUERY_ATTR)
def _complete(npc_id, npc_x, npc_y, current_map):
    label = TARGET_NAME or f"VNUM {TARGET_VNUM}"
    setattr(self, STORAGE_ATTR, {"ID": int(npc_id), "x": int(npc_x), "y": int(npc_y), "map_id": current_map})
    print(f"Saved {label} Identity: ID={int(npc_id)}, x={int(npc_x)}, y={int(npc_y)}")
    self.attr1 = str(NEXT_ATTR1_STATE)
    _reset()
globals()[RESET_FUNC] = _reset
globals()[COMPLETE_FUNC] = _complete
try:
    should_run = int(getattr(self, "attr1", 0)) == TRIGGER_ATTR1_STATE
except (TypeError, ValueError):
    should_run = False
if not should_run:
    _reset()
else:
    current_map = getattr(self, "map_id", None)
    existing = getattr(self, STORAGE_ATTR, {})
    has_existing = isinstance(existing, dict) and existing.get("map_id") == current_map and all(k in existing for k in ("ID", "x", "y"))
    if has_existing:
        _complete(existing["ID"], existing["x"], existing["y"], current_map)
    else:
        target = None
        for npc in getattr(self, "npcs", []):
            try:
                if int(npc.get("vnum", 0)) == TARGET_VNUM:
                    target = npc
                    break
            except (AttributeError, TypeError, ValueError):
                continue
        if target:
            _complete(target["id"], target["x"], target["y"], current_map)
        else:
            now = time.monotonic()
            last = getattr(self, LAST_QUERY_ATTR, 0)
            if now - last >= QUERY_COOLDOWN_SECONDS and getattr(self, "api", None) and hasattr(self.api, "query_map_entities"):
                label = TARGET_NAME or f"VNUM {TARGET_VNUM}"
                if last == 0:
                    print(f"Requesting map entities to locate {label} teleporter.")
                self.api.query_map_entities()
                setattr(self, LAST_QUERY_ATTR, now)