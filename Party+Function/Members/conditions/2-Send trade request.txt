periodical
0
current_time = time.monotonic()
last_request = getattr(self, "_trade_request_last_sent", 0.0)
trade_state = getattr(selfgroup, "trade", "0")
is_trade_candidate = int(getattr(self, "attr96", 0)) == 1
if int(self.attr1) == 0 and int(self.attr90) in (1, 2):
        if int(self.attr90) == 1 and trade_state == "0":
                candidate_id = str(self.id)
                if getattr(selfgroup, "trade_candidate", None) is None:
                        selfgroup.trade_candidate = candidate_id
                if getattr(selfgroup, "trade_candidate", None) == candidate_id:
                        selfgroup.trade = "1"  # bloquear comercio para otros miembros
                        self.attr96 = 1  # marcar a este miembro como bloqueador del comercio
                        selfgroup.trade_candidate = None
                        cond.off = 0
                        time.sleep(self.randomize_delay(0.75,1.5))
                        cond.on = 3
                        cond.on = 4
                        cond.on = 5
                        self.attr90 = 2  # desactivar esta condiciÃ³n y activar la siguiente
                        time.sleep(self.randomize_delay(0.75,1.5))
                        self.api.send_packet(f"req_exc 1 {self.leaderID}")
                        self._trade_request_last_sent = current_time
                        print(f"2-[MEMBER] {self.name} sending trade request")
        elif int(self.attr90) == 2 and is_trade_candidate:
                if current_time - last_request >= 10:
                        self.api.send_packet(f"req_exc 1 {self.leaderID}")
                        self._trade_request_last_sent = current_time
                        print(f"2-[MEMBER] {self.name} resending trade request (waiting acceptance)")